version: '3.8'

# Cloudflare Dynamic DNS Manager - Standalone Deployment
# Скачайте этот файл на сервер и выполните: docker-compose -f docker-compose.standalone.yml up -d

services:
  cloudflare-dns:
    image: antalkon/cloudflare-dns-manager:latest  # Замените на ваш Docker Hub образ
    container_name: cloudflare-dns-manager
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      # Персистентное хранение данных
      - dns_data:/app/instance
      - dns_logs:/app/logs
    environment:
      # Основные настройки
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production-$(openssl rand -hex 32)}
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - PYTHONUNBUFFERED=1
      
      # Настройки безопасности
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-false}
      - SESSION_COOKIE_HTTPONLY=true
      
      # Настройки приложения
      - DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE:-ru}
      - ALLOW_REGISTRATION=${ALLOW_REGISTRATION:-false}
      
    networks:
      - dns_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy с SSL (опционально)
  nginx:
    image: nginx:alpine
    container_name: cloudflare-dns-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx_config:/etc/nginx/conf.d
      - nginx_ssl:/etc/ssl/private
      - nginx_logs:/var/log/nginx
    depends_on:
      - cloudflare-dns
    networks:
      - dns_network
    profiles:
      - nginx
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
    command: |
      sh -c "
      # Создаем базовую конфигурацию Nginx
      cat > /etc/nginx/conf.d/default.conf << 'EOF'
      server {
          listen 80;
          server_name ${DOMAIN_NAME:-localhost};
          
          # Редирект на HTTPS (если SSL настроен)
          # return 301 https://\$$server_name\$$request_uri;
          
          # Или прокси на HTTP (по умолчанию)
          location / {
              proxy_pass http://cloudflare-dns:5000;
              proxy_set_header Host \$$host;
              proxy_set_header X-Real-IP \$$remote_addr;
              proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$$scheme;
              proxy_connect_timeout 30s;
              proxy_send_timeout 30s;
              proxy_read_timeout 30s;
          }
          
          # Health check
          location /health {
              proxy_pass http://cloudflare-dns:5000/health;
              access_log off;
          }
      }
      
      # SSL конфигурация (раскомментируйте если есть сертификаты)
      # server {
      #     listen 443 ssl http2;
      #     server_name ${DOMAIN_NAME:-localhost};
      #     
      #     ssl_certificate /etc/ssl/private/cert.pem;
      #     ssl_certificate_key /etc/ssl/private/key.pem;
      #     
      #     location / {
      #         proxy_pass http://cloudflare-dns:5000;
      #         proxy_set_header Host \$$host;
      #         proxy_set_header X-Real-IP \$$remote_addr;
      #         proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
      #         proxy_set_header X-Forwarded-Proto https;
      #     }
      # }
      EOF
      
      nginx -g 'daemon off;'
      "

  # Watchtower для автоматических обновлений (опционально)
  watchtower:
    image: containrrr/watchtower
    container_name: cloudflare-dns-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400  # Проверять раз в день
      - WATCHTOWER_INCLUDE_STOPPED=true
    command: cloudflare-dns-manager
    profiles:
      - auto-update

networks:
  dns_network:
    driver: bridge
    name: cloudflare_dns_net

volumes:
  dns_data:
    name: cloudflare_dns_data
    driver: local
  dns_logs:
    name: cloudflare_dns_logs  
    driver: local
  nginx_config:
    name: cloudflare_dns_nginx_config
    driver: local
  nginx_ssl:
    name: cloudflare_dns_nginx_ssl
    driver: local
  nginx_logs:
    name: cloudflare_dns_nginx_logs
    driver: local

# Документация по использованию:
#
# 1. Базовый запуск:
#    wget https://raw.githubusercontent.com/USERNAME/cloudflare-dns-manager/main/docker-compose.standalone.yml
#    docker-compose -f docker-compose.standalone.yml up -d
#
# 2. С Nginx reverse proxy:
#    docker-compose -f docker-compose.standalone.yml --profile nginx up -d
#
# 3. С автообновлениями:
#    docker-compose -f docker-compose.standalone.yml --profile auto-update up -d
#
# 4. Все вместе:
#    docker-compose -f docker-compose.standalone.yml --profile nginx --profile auto-update up -d
#
# 5. Настройка переменных окружения:
#    echo "SECRET_KEY=your-secret-key" > .env
#    echo "DOMAIN_NAME=your-domain.com" >> .env
#    docker-compose -f docker-compose.standalone.yml up -d
#
# 6. Просмотр логов:
#    docker-compose -f docker-compose.standalone.yml logs -f
#
# 7. Остановка:
#    docker-compose -f docker-compose.standalone.yml down
#
# 8. Полная очистка (ВНИМАНИЕ: удалит все данные):
#    docker-compose -f docker-compose.standalone.yml down -v 